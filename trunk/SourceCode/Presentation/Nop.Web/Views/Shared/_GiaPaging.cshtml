@{
    Layout = null;
}
@model Nop.Web.Models.Catalog.GiaPagingModel
@if (Model != null && Model.HasPaging)
{
    var nextLink = (Model.CurrentPage < Model.TotalPages) ? Model.BaseUrl + (Model.CurrentPage + 1) : "";
    var prevLink = (Model.CurrentPage > 1) ? (Model.BaseUrl + (Model.CurrentPage - 1)) : "";
    
    int i = 1;
    <div style="clear: both;"></div>
    <div class="gia_paging">
        @{
    var baseUrl = Model.BaseUrl;
    
    if(!string.IsNullOrEmpty(prevLink))
    {
        <a href="@prevLink" class="item">Prev</a>
    }
    
    while (i <= Model.TotalPages && i <= 3 && i<Model.CurrentPage)
    {
        <a class="item" href="@baseUrl@i">@i</a>
        i++;
    }
    
    if(Model.CurrentPage>5)
    {
        <span class="item">...</span>
    }
    if(Model.CurrentPage>4)
    {
        <a class="item" href="@baseUrl@(Model.CurrentPage-1)">@(Model.CurrentPage-1)</a>
    }
            <span class="item current">[@Model.CurrentPage]</span>
    if(Model.CurrentPage<Model.TotalPages)
    {
        <a class="item" href="@baseUrl@(Model.CurrentPage+1)">@(Model.CurrentPage+1)</a>
    }
    
    if(Model.CurrentPage+2<Model.TotalPages)
    {
        <span class="item">...</span>
    }
    if(Model.CurrentPage+1 < Model.TotalPages)
    {
        <a class="item" href="@baseUrl@Model.TotalPages">@Model.TotalPages</a>
    }
    
    if(!string.IsNullOrEmpty(nextLink))
    {
        <a href="@nextLink" class="item">Next</a>
    }
        
    /*
    while (i <= Model.TotalPages)
    {
        if (i == Model.CurrentPage)
        {
            <span class="item current">@i</span>
        }
        else
        {
            <a class="item" href="@baseUrl@i">@i</a>
        }
        i++;
    }
     */
    /*
    if (Model.TotalPages > 3)
    {
        if (Model.CurrentPage < 6)
        {

        }
        else if (Model.TotalPages >= Model.CurrentPage + 1)
        {
            <span class="item">...</span>
            var index = Model.CurrentPage - 1;
            <a class="item current" href="@baseUrl@index">@Model.CurrentPage-1</a>
            <span class="item">@Model.CurrentPage</span>
            index = Model.CurrentPage + 1;
            <a class="item" href="@baseUrl@index">@Model.CurrentPage+1</a>
        }

        if (Model.TotalPages > Model.CurrentPage + 1)
        {
            <span class="item">...</span>
            <a class="item" href="@baseUrl@Model.TotalPages">@Model.TotalPages</a>
        }
    }
     * */
        }
    </div>
    @*
    <div class="gia_paging">
        @{
    var firstLink = Model.BaseUrl + 1;
    var lastLink = Model.BaseUrl + Model.TotalPages;
    var nextLink = (Model.CurrentPage < Model.TotalPages) ? Model.BaseUrl + (Model.CurrentPage + 1) : "";
    var prevLink = (Model.CurrentPage > 1) ? (Model.BaseUrl + (Model.CurrentPage - 1)) : "";
        }
        <a class="item" href="@firstLink">First</a>
        <span class="item">|</span>
        @if (string.IsNullOrEmpty(nextLink))
        {
            <span class="item">Next</span>
        }
        else
        {
            <a href="@nextLink" class="item">Next</a>
        }

        <span class="item">|</span>

        @if (string.IsNullOrEmpty(prevLink))
        {
            <span class="item">Prev</span>
        }
        else
        {
            <a href="@prevLink" class="item">Prev</a>
        }

        <span class="item">|</span>

        <a href="@lastLink" class="item">Last</a>
        @{
        var count = (Model.TotalPages - Model.PageStartingShow) >= Model.Count ? Model.Count : (Model.TotalPages - Model.PageStartingShow);
        }
        @for (i = Model.PageStartingShow; i <= Model.PageStartingShow + count; i++)
        {
            var link = Model.BaseUrl + i;
            if (i == Model.CurrentPage)
            {
            <span class="item current">@i</span>
            }
            else
            {
            <a class="item" href="@link" >@i</a>
            }
        }
    </div>
    *@
}