@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Web.Models.ShoppingCart;
@{
    var webHelper = EngineContext.Current.Resolve<IWebHelper>();
}
<div class="order-summary-content">
    @Html.Widget("order_summary_content_before")
    @Html.Partial("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        using (Html.BeginForm("ShippingCart","ShoppingCart", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="basket">
                <ul>
                    <li class="headings ">
                        @if (Model.IsEditable)
                        {
                            <div class="remove-from-cart">
                                @T("ShoppingCart.Remove")
                            </div>
                        }
                        @if (Model.ShowProductImages)
                        {
                            <div class="product-picture item">
                                @T("ShoppingCart.Image")
                            </div>
                        }
                        <div class="unit-price">@T("ShoppingCart.UnitPrice")</div>
                        <div class="qty">@T("ShoppingCart.Quantity")</div>
                        <div class="total">@T("ShoppingCart.ItemTotal")</div>
                        <div class="recipient">RECIPIENT</div>
                    </li>
                    <!-- item -->
                    @foreach (var item in Model.Items)
                    {
                        <li>
                            @if ( Model.IsEditable)
                            {
                                <div class="remove-from-cart remove">
                                    <input type="checkbox" name="removefromcart" value="@(item.Id)" />
                                </div>
                            }
                            <div class="item">
                                @if (Model.ShowProductImages)
                                {
                                    <div class="thumbnail">
                                        <a href="javascript:void(0)">
                                            <a href="@Url.RouteUrl("Product", new { sename=item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                        </a>
                                    </div>
                                }
                                <div class="caption">
                                    <a href="@Url.RouteUrl("Product", new { sename=item.ProductSeName })" class="product-name">@item.ProductName</a>
                                    @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                    {
                                        <div class="attributes">
                                            @Html.Raw(item.AttributeInfo)
                                        </div>
                                    }
                                    @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                    {
                                        <div class="recurring-info">
                                            @Html.Raw(item.RecurringInfo)
                                        </div>
                                    }
                                    @if (!String.IsNullOrEmpty(item.RentalInfo))
                                    {
                                        <div class="rental-info">
                                            @Html.Raw(item.RentalInfo)
                                        </div>
                                    }
                                    @if (Model.IsEditable && item.AllowItemEditing)
                                    {
                                        var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName });
                                        editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid=" + item.Id, null);
                                        <div class="edit-item">
                                            <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                        </div>
                                    }
                                    @if (item.Warnings.Count > 0)
                                    {
                                        <div class="message-error">
                                            <ul>
                                                @foreach (var warning in item.Warnings)
                                                {
                                                    <li>@warning</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </div>

                            </div>

                            <div class="unit-price">
                                <span class="product-unit-price">@item.UnitPrice</span>
                            </div>

                            <div class="qty">
                                @if (Model.IsEditable)
                                {
                                    if (item.AllowedQuantities.Count > 0)
                                    {
                                        <select name="itemquantity@(item.Id)" class="qty-dropdown">
                                            @foreach (var qty in item.AllowedQuantities)
                                            {
                                                <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" />
                                    }

                                }
                                else
                                {
                                    <span class="product-quantity">@item.Quantity</span>
                                }

                            </div>

                            <div class="total">
                                <span class="product-subtotal">@item.SubTotal</span>
                                @if (!String.IsNullOrEmpty(item.Discount))
                                {
                                    <div class="discount">
                                        @T("ShoppingCart.ItemYouSave"): @item.Discount
                                    </div>
                                }
                            </div>

                            <div class="recipient" data-cartid="@item.Id">
                                @foreach (var recipient in item.ShippingCartItems)
                                {
                                    <div class="item-recipient" data-rename="@recipient.RecipientName"></div>
                                }
                            </div>
                        </li>
            <!-- item -->
                    }
                </ul>
                <div id="recipient-warning-box" title="@T("Checkout.ShippingAddress")" style="display:none;">
                    <p>@T("Checkout.ShippingAddress.PleaseInputRecipient")</p>
                </div>
                <input id="recipient-names" type="hidden" value="@String.Join(",",Model.RecipientNames)" />

                <script type="text/javascript">
                    var myself = "myself";
                    var addnew = "new recipient";
                    var recipientOptions = $('#recipient-names').val().split(',');
                    if (recipientOptions.indexOf(myself) == -1) recipientOptions.splice(0, 0, myself);
                    if (recipientOptions.indexOf(addnew) == -1) recipientOptions.splice(recipientOptions.length - 1, 0, addnew);
                    
                    function loadRecipients() {
                        var recipientSelectList = $("<select class='select recipient-select'><select>");
                        $.each(recipientOptions, function (i) {
                            $(recipientSelectList)
                                .append($("<option></option>")
                                .attr("value", recipientOptions[i])
                                .text(recipientOptions[i]));
                        });
                        var buttonRemoveRecipent = $('<div class="remove"><a href="javascript:void(0);" class="del-recipient"> <span aria-hidden="true" class="glyphicon glyphicon-remove"></span></a></div>');
                        $(".recipient .item-recipient").each(function () {
                            //$(this).html('');
                            var recipients = $(this).parent('.recipient')[0];
                            var cartId = $(recipients).data('cartid');
                            var recipientName = $(this).data('rename');
                            var select = $(recipientSelectList).clone();
                            $(select).val(recipientName).attr('name', 'recipient' + cartId);
                            $(this).html($('<label class="dropdown-select"></label>').append(select));
                            $(this).append(buttonRemoveRecipent.clone());
                        });
                    }

                    $(document).ready(function () {
                        loadRecipients();
                    })
                    $(document).on('click', '.del-recipient', function () {
                        var recipientRow = $(this).parents('.item-recipient:first');
                        var qtySelect = $(this).parents('li:first').find('select.qty-dropdown');
                        $(recipientRow).remove();
                        $(qtySelect).val($(qtySelect).val() - 1);
                    });

                    var addRecipientFormInline = $('<div class="form-inline frm-add-new-recipient"><div class="form-group"><input type="text" placeholder="Enter Recipient Name" class="form-control input-cart recipient-name"></div> <button class="btn btn-default submit-recipient" type="button">Submit</button><div class="description"><p>Recipient address to be entered on the next page after checkout </p></div></div>')
                    $(document).on('change', '.item-recipient select', function () {
                        var recipientRow = $(this).parents('.item-recipient:first');
                        $(recipientRow).data('rename', $(this).val());
                        if ($(this).val() == addnew) {
                            $(addRecipientFormInline).clone().insertAfter(recipientRow);
                        } else {
                            $(recipientRow).next('.frm-add-new-recipient').remove();
                        }
                    });
                    $(document).on('click', '.frm-add-new-recipient .submit-recipient', function () {
                        var formAddRecipient = $(this).parents('.frm-add-new-recipient:first');
                        var recipientRow = $(formAddRecipient).prev('.item-recipient');
                        var rename = $(formAddRecipient).find('input[type="text"]').val().trim();
                        if (rename == "") return;
                        if (recipientOptions.indexOf(rename) == -1) {
                            // splice(position, numberOfItemsToRemove, item)
                            recipientOptions.splice(recipientOptions.length - 1, 0, rename);
                        }
                        $(recipientRow).data('rename', rename);
                        $(formAddRecipient).remove();
                        loadRecipients();
                    });
                    $(document).on('change', '.qty-dropdown', function () {
                        var qty = parseInt($(this).val());
                        var recipients = $(this).parents('li:first').find('.recipient');
                        var totalRow = $(recipients).find('.item-recipient').length;
                        $(recipients).find('.item-recipient').each(function () {
                            if ($(this).index() > qty-1) $(this).remove();
                        })
                        for (i = totalRow+1; i <= qty; i++) {
                            var recipientrow = $("<div data-rename='MySelft'></div>").addClass("item-recipient");
                            $(recipients).append(recipientrow);
                        }
                        loadRecipients();
                    });
                    function ValidateBeforeSubmit() {
                        var valid = true;
                        if ($('form .frm-add-new-recipient').length > 0) {
                            valid = false;
                            $('form .frm-add-new-recipient').addClass('required');
                            $('#recipient-warning-box').dialog();
                        }
                        return valid;
                    }
                    $(document).ready(function () {
                        $('.update-cart-button').click(function () {
                            if (!ValidateBeforeSubmit()) {
                                return false;
                            }
                        })
                    });
                </script>

            </div>

            <div class="cart-options">
                @if (Model.IsEditable)
                {
                    <div class="common-buttons">
                        <input type="submit" name="updateshippingcart" value="@T("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" />
                        <input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />
                    </div>
                }
                @if (Model.IsEditable)
                {
                    @Html.Partial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary())
                }
                @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
                {
                    <div class="selected-checkout-attributes">
                        @Html.Raw(Model.CheckoutAttributeInfo)
                    </div>
                }
            </div>
            <div class="cart-footer">
                @Html.Widget("order_summary_cart_footer")
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals">
                        <div class="deals">
                            @Html.Partial("_DiscountBox", Model.DiscountBox)
                            @Html.Partial("_GiftCardBox", Model.GiftCardBox)
                            @Html.Widget("order_summary_content_deals")
                        </div>
                        @Html.Partial("EstimateShipping", Model.EstimateShipping)
                    </div>
                }
                <div class="totals">
                    @Html.Action("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable })
                    @if (Model.IsEditable)
                    {
                        if (!String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        }
                    }
                    @if (Model.IsEditable)
                    {
                        if (Model.TermsOfServiceOnShoppingCartPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display:none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service">
                                <input id="termsofservice" type="checkbox" name="termsofservice" />
                                <span>@T("Checkout.TermsOfService.IAccept")<a class="read" onclick="javascript:OpenWindow('@Url.RouteUrl("TopicPopup", new { SystemName = "conditionsofuse" })', 450, 500, true)">@T("Checkout.TermsOfService.Read")</a></span>
                            </div>
                        }
                        <div class="checkout-buttons">
                            @if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                            {
                                <script type="text/javascript">
                                    
                                    $(document).ready(function () {
                                        $('#checkout').click(function () {
                                            if (ValidateBeforeSubmit()) {
                                                //terms of service
                                                var termOfServiceOk = true;
                                                if ($('#termsofservice').length > 0) {
                                                    //terms of service element exists
                                                    if (!$('#termsofservice').is(':checked')) {
                                                        $("#terms-of-service-warning-box").dialog();
                                                        termOfServiceOk = false;
                                                    } else {
                                                        termOfServiceOk = true;
                                                    }
                                                }
                                                return termOfServiceOk;
                                            }
                                            return false;
                                        });
                                    });
                                </script>
                                <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                    @T("Checkout.Button")
                                </button>
                            }
                        </div>
                        <div class="addon-buttons">
                            @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                            @Html.Partial("_ButtonPaymentMethod", Model)
                        </div>
                    }
                </div>
            </div>
            if (Model.IsEditable)
            {
                @Html.Action("CrossSellProducts", "Product")
            }
        }
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @Html.Widget("order_summary_content_after")
</div>
